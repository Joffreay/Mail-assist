/**
 * Serveur Webhook Microsoft Graph
 * 
 * Ce serveur g√®re les notifications et validations des webhooks Microsoft Graph.
 * Il impl√©mente le protocole de validation et traite les notifications de changement.
 * 
 * @author Microsoft Corporation (modifi√©)
 * @license MIT
 * @version 1.0.0
 */

import express from 'express';
import bodyParser from 'body-parser';

/**
 * Configuration du serveur
 */
const SERVER_CONFIG = {
  PORT: process.env.PORT || 8080,
  ENDPOINTS: {
    WEBHOOK: '/graph/notifications',
    HEALTH: '/health'
  },
  LOG_LEVELS: {
    INFO: 'INFO',
    WARN: 'WARN',
    ERROR: 'ERROR'
  }
};

/**
 * Classe principale du serveur webhook
 */
class WebhookServer {
  constructor() {
    this.app = express();
    this.isRunning = false;
    
    // Initialiser le serveur
    this.initialize();
  }

  /**
   * Initialise le serveur Express
   */
  initialize() {
    // Middleware pour parser le JSON
    this.app.use(bodyParser.json({ limit: '10mb' }));
    
    // Middleware pour parser les donn√©es URL-encoded
    this.app.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));
    
    // Middleware de logging
    this.app.use(this.loggingMiddleware.bind(this));
    
    // Configuration des routes
    this.setupRoutes();
    
    // Middleware de gestion d'erreurs
    this.app.use(this.errorHandler.bind(this));
    
    console.log('üîß Serveur webhook initialis√©');
  }

  /**
   * Middleware de logging personnalis√©
   */
  loggingMiddleware(req, res, next) {
    const timestamp = new Date().toISOString();
    const method = req.method;
    const url = req.url;
    const userAgent = req.get('User-Agent') || 'Unknown';
    
    console.log(`[${timestamp}] ${method} ${url} - ${userAgent}`);
    
    // Ajouter des informations de requ√™te pour le d√©bogage
    req.requestId = this.generateRequestId();
    req.startTime = Date.now();
    
    next();
  }

  /**
   * Configure les routes du serveur
   */
  setupRoutes() {
    // Route de sant√© du serveur
    this.app.get(SERVER_CONFIG.ENDPOINTS.HEALTH, this.healthCheck.bind(this));
    
    // Route de validation des webhooks (GET)
    this.app.get(SERVER_CONFIG.ENDPOINTS.WEBHOOK, this.handleWebhookValidation.bind(this));
    
    // Route de r√©ception des notifications (POST)
    this.app.post(SERVER_CONFIG.ENDPOINTS.WEBHOOK, this.handleWebhookNotification.bind(this));
    
    // Route par d√©faut pour les requ√™tes non reconnues
    this.app.use('*', this.handleNotFound.bind(this));
    
    console.log('üõ£Ô∏è Routes configur√©es');
  }

  /**
   * G√®re la validation des webhooks Microsoft Graph
   * 
   * @param {Object} req - Objet de requ√™te Express
   * @param {Object} res - Objet de r√©ponse Express
   */
  handleWebhookValidation(req, res) {
    try {
      const validationToken = req.query.validationToken;
      
      if (!validationToken) {
        this.logRequest(SERVER_CONFIG.LOG_LEVELS.WARN, 'Validation token manquant', req);
        return res.status(400).json({
          error: 'Missing validationToken',
          message: 'Le param√®tre validationToken est requis pour la validation des webhooks'
        });
      }

      this.logRequest(SERVER_CONFIG.LOG_LEVELS.INFO, `Validation webhook: ${validationToken}`, req);
      
      // Retourner le token de validation (requis par Microsoft Graph)
      res.status(200)
        .set('Content-Type', 'text/plain')
        .send(validationToken);
        
    } catch (error) {
      this.logRequest(SERVER_CONFIG.LOG_LEVELS.ERROR, `Erreur validation: ${error.message}`, req);
      res.status(500).json({
        error: 'Internal Server Error',
        message: 'Erreur lors de la validation du webhook'
      });
    }
  }

  /**
   * G√®re la r√©ception des notifications de changement
   * 
   * @param {Object} req - Objet de requ√™te Express
   * @param {Object} res - Objet de r√©ponse Express
   */
  async handleWebhookNotification(req, res) {
    try {
      const requestBody = req.body;
      const contentType = req.get('Content-Type');
      
      this.logRequest(SERVER_CONFIG.LOG_LEVELS.INFO, 'Notification webhook re√ßue', req, {
        contentType,
        bodySize: JSON.stringify(requestBody).length
      });

      // V√©rifier que le corps de la requ√™te est pr√©sent
      if (!requestBody || Object.keys(requestBody).length === 0) {
        this.logRequest(SERVER_CONFIG.LOG_LEVELS.WARN, 'Corps de notification vide', req);
        return res.status(400).json({
          error: 'Empty notification body',
          message: 'Le corps de la notification est vide'
        });
      }

      // Traiter la notification selon son type
      await this.processNotification(requestBody, req);

      // R√©pondre avec un statut 202 (Accepted) comme requis par Microsoft Graph
      res.status(202).json({
        status: 'accepted',
        message: 'Notification trait√©e avec succ√®s',
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      this.logRequest(SERVER_CONFIG.LOG_LEVELS.ERROR, `Erreur notification: ${error.message}`, req);
      
      // En cas d'erreur, on r√©pond quand m√™me avec 202 pour √©viter les retry
      // Microsoft Graph retry automatiquement en cas d'√©chec
      res.status(202).json({
        status: 'accepted_with_errors',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * Traite une notification re√ßue
   * 
   * @param {Object} notification - Donn√©es de la notification
   * @param {Object} req - Objet de requ√™te Express
   */
  async processNotification(notification, req) {
    try {
      // Extraire les informations de base de la notification
      const { value, validationToken } = notification;
      
      if (validationToken) {
        this.logRequest(SERVER_CONFIG.LOG_LEVELS.INFO, `Token de validation re√ßu: ${validationToken}`, req);
        return;
      }

      if (value && Array.isArray(value)) {
        // Traiter chaque changement individuellement
        for (const change of value) {
          await this.processChange(change, req);
        }
      } else {
        this.logRequest(SERVER_CONFIG.LOG_LEVELS.WARN, 'Format de notification non reconnu', req, {
          notificationKeys: Object.keys(notification)
        });
      }

    } catch (error) {
      this.logRequest(SERVER_CONFIG.LOG_LEVELS.ERROR, `Erreur traitement notification: ${error.message}`, req);
      throw error;
    }
  }

  /**
   * Traite un changement individuel
   * 
   * @param {Object} change - Donn√©es du changement
   * @param {Object} req - Objet de requ√™te Express
   */
  async processChange(change, req) {
    try {
      const { changeType, resource, resourceData, tenantId, subscriptionId } = change;
      
      this.logRequest(SERVER_CONFIG.LOG_LEVELS.INFO, `Changement d√©tect√©: ${changeType}`, req, {
        resource,
        subscriptionId,
        tenantId
      });

      // Traiter selon le type de changement
      switch (changeType) {
        case 'created':
          await this.handleResourceCreated(resource, resourceData, req);
          break;
          
        case 'updated':
          await this.handleResourceUpdated(resource, resourceData, req);
          break;
          
        case 'deleted':
          await this.handleResourceDeleted(resource, req);
          break;
          
        default:
          this.logRequest(SERVER_CONFIG.LOG_LEVELS.WARN, `Type de changement non g√©r√©: ${changeType}`, req);
      }

    } catch (error) {
      this.logRequest(SERVER_CONFIG.LOG_LEVELS.ERROR, `Erreur traitement changement: ${error.message}`, req);
      // Ne pas faire √©chouer le traitement des autres changements
    }
  }

  /**
   * G√®re la cr√©ation d'une ressource
   * 
   * @param {string} resource - URI de la ressource
   * @param {Object} resourceData - Donn√©es de la ressource
   * @param {Object} req - Objet de requ√™te Express
   */
  async handleResourceCreated(resource, resourceData, req) {
    this.logRequest(SERVER_CONFIG.LOG_LEVELS.INFO, `Ressource cr√©√©e: ${resource}`, req, {
      resourceData: resourceData ? Object.keys(resourceData) : 'N/A'
    });
    
    // TODO: Impl√©menter la logique m√©tier pour la cr√©ation
    // Exemple: synchroniser avec une base de donn√©es, notifier d'autres services, etc.
  }

  /**
   * G√®re la mise √† jour d'une ressource
   * 
   * @param {string} resource - URI de la ressource
   * @param {Object} resourceData - Donn√©es de la ressource
   * @param {Object} req - Objet de requ√™te Express
   */
  async handleResourceUpdated(resource, resourceData, req) {
    this.logRequest(SERVER_CONFIG.LOG_LEVELS.INFO, `Ressource mise √† jour: ${resource}`, req, {
      resourceData: resourceData ? Object.keys(resourceData) : 'N/A'
    });
    
    // TODO: Impl√©menter la logique m√©tier pour la mise √† jour
  }

  /**
   * G√®re la suppression d'une ressource
   * 
   * @param {string} resource - URI de la ressource
   * @param {Object} req - Objet de requ√™te Express
   */
  async handleResourceDeleted(resource, req) {
    this.logRequest(SERVER_CONFIG.LOG_LEVELS.INFO, `Ressource supprim√©e: ${resource}`, req);
    
    // TODO: Impl√©menter la logique m√©tier pour la suppression
  }

  /**
   * Route de v√©rification de sant√© du serveur
   * 
   * @param {Object} req - Objet de requ√™te Express
   * @param {Object} res - Objet de r√©ponse Express
   */
  healthCheck(req, res) {
    const healthStatus = {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      version: '1.0.0'
    };

    res.status(200).json(healthStatus);
  }

  /**
   * G√®re les routes non trouv√©es
   * 
   * @param {Object} req - Objet de requ√™te Express
   * @param {Object} res - Objet de r√©ponse Express
   */
  handleNotFound(req, res) {
    this.logRequest(SERVER_CONFIG.LOG_LEVELS.WARN, `Route non trouv√©e: ${req.method} ${req.originalUrl}`, req);
    
    res.status(404).json({
      error: 'Not Found',
      message: 'La route demand√©e n\'existe pas',
      path: req.originalUrl,
      method: req.method
    });
  }

  /**
   * Middleware de gestion d'erreurs global
   * 
   * @param {Error} error - Erreur captur√©e
   * @param {Object} req - Objet de requ√™te Express
   * @param {Object} res - Objet de r√©ponse Express
   * @param {Function} next - Fonction next Express
   */
  errorHandler(error, req, res, next) {
    this.logRequest(SERVER_CONFIG.LOG_LEVELS.ERROR, `Erreur serveur: ${error.message}`, req, {
      stack: error.stack
    });

    // Ne pas exposer les d√©tails de l'erreur en production
    const errorResponse = {
      error: 'Internal Server Error',
      message: 'Une erreur interne s\'est produite',
      timestamp: new Date().toISOString()
    };

    // En d√©veloppement, ajouter plus de d√©tails
    if (process.env.NODE_ENV === 'development') {
      errorResponse.details = error.message;
      errorResponse.stack = error.stack;
    }

    res.status(500).json(errorResponse);
  }

  /**
   * G√©n√®re un ID unique pour chaque requ√™te
   * 
   * @returns {string} ID unique de la requ√™te
   */
  generateRequestId() {
    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * Enregistre une requ√™te avec des informations d√©taill√©es
   * 
   * @param {string} level - Niveau de log
   * @param {string} message - Message √† logger
   * @param {Object} req - Objet de requ√™te Express
   * @param {Object} [additionalData] - Donn√©es suppl√©mentaires √† logger
   */
  logRequest(level, message, req, additionalData = {}) {
    const logData = {
      timestamp: new Date().toISOString(),
      level,
      message,
      requestId: req.requestId,
      method: req.method,
      url: req.url,
      userAgent: req.get('User-Agent'),
      ip: req.ip || req.connection.remoteAddress,
      ...additionalData
    };

    // Calculer le temps de traitement si disponible
    if (req.startTime) {
      logData.processingTime = Date.now() - req.startTime;
    }

    // Formater le log selon le niveau
    switch (level) {
      case SERVER_CONFIG.LOG_LEVELS.ERROR:
        console.error('‚ùå', JSON.stringify(logData, null, 2));
        break;
      case SERVER_CONFIG.LOG_LEVELS.WARN:
        console.warn('‚ö†Ô∏è', JSON.stringify(logData, null, 2));
        break;
      default:
        console.log('‚ÑπÔ∏è', JSON.stringify(logData, null, 2));
    }
  }

  /**
   * D√©marre le serveur
   */
  async start() {
    try {
      await new Promise((resolve, reject) => {
        this.server = this.app.listen(SERVER_CONFIG.PORT, (error) => {
          if (error) {
            reject(error);
          } else {
            resolve();
          }
        });
      });

      this.isRunning = true;
      
      console.log(`‚úÖ Serveur webhook d√©marr√© sur http://localhost:${SERVER_CONFIG.PORT}`);
      console.log(`üîó Endpoint webhook: http://localhost:${SERVER_CONFIG.PORT}${SERVER_CONFIG.ENDPOINTS.WEBHOOK}`);
      console.log(`üíö Endpoint sant√©: http://localhost:${SERVER_CONFIG.PORT}${SERVER_CONFIG.ENDPOINTS.HEALTH}`);
      
    } catch (error) {
      console.error('‚ùå Erreur lors du d√©marrage du serveur:', error);
      throw error;
    }
  }

  /**
   * Arr√™te le serveur
   */
  async stop() {
    if (this.server && this.isRunning) {
      try {
        await new Promise((resolve) => {
          this.server.close(resolve);
        });
        
        this.isRunning = false;
        console.log('üõë Serveur webhook arr√™t√©');
        
      } catch (error) {
        console.error('‚ùå Erreur lors de l\'arr√™t du serveur:', error);
        throw error;
      }
    }
  }

  /**
   * Obtient le statut du serveur
   * 
   * @returns {Object} Statut du serveur
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      port: SERVER_CONFIG.PORT,
      uptime: this.isRunning ? process.uptime() : 0,
      endpoints: SERVER_CONFIG.ENDPOINTS
    };
  }
}

// Cr√©er et d√©marrer le serveur
const webhookServer = new WebhookServer();

// Gestion propre de l'arr√™t du serveur
process.on('SIGINT', async () => {
  console.log('\nüîÑ Arr√™t du serveur...');
  await webhookServer.stop();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüîÑ Arr√™t du serveur...');
  await webhookServer.stop();
  process.exit(0);
});

// D√©marrer le serveur
webhookServer.start().catch((error) => {
  console.error('‚ùå Impossible de d√©marrer le serveur:', error);
  process.exit(1);
});

export default webhookServer;
